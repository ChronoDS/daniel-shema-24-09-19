{"version":3,"sources":["components/Utils/baseUtils.js","components/Utils/apiUtils.js","components/Navigation.js","components/Common/TemperatureIndicator.js","components/Utils/actionCreators.js","components/Common/Header.js","components/Common/NextDaysItem.js","components/Common/NextDays.js","components/Pages/Home.js","components/Common/FavoriteItem.js","components/Pages/Favorites.js","App.js","serviceWorker.js","index.js","components/Utils/localStorage.js"],"names":["urlFromImgId","weatherImageNumber","celsiusToFahrenheit","deg","toFixed","getDayOfWeek","epochTime","date","Date","getDay","weekday","apiKey","requestLocationKey","location","encodeURIComponent","trim","url","console","log","axios","get","then","value","data","err","autoSearchQuery","query","Navigation","_handleSearch","props","dispatch","type","isLoading","options","this","isCelsius","isLightTheme","children","className","id","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onChange","checked","htmlFor","labelKey","minLength","onSearch","placeholder","renderMenuItemChildren","option","LocalizedName","React","Component","connect","state","TemperatureIndicator","setIndicatorColor","temp","TemperatureIndicators","temperature","icon","color","size","isHeadline","removeFromFavorites","cityId","CityId","Header","city","originCountry","weatherText","weatherIcon","IsDayTime","onClick","City","OriginCountry","Temperature","WeatherText","WeatherIcon","addToFavorites","src","crossOrigin","alt","NextDaysItem","key","EpochDate","Minimum","Value","Maximum","style","rawDate","substring","indexOf","split","reverse","join","dateFormatting","NextDays","phraseData","day","Day","Night","locationKey","DailyForecasts","requestNext5DaysForecast","map","catch","reason","index","currentlyDisplayed","Home","defaultCity","EnglishName","Key","Country","requestCurrentConditionsByKey","Metric","TTL","FavoriteItem","Favorites","favorites","library","add","fab","fas","App","exact","path","component","Boolean","window","hostname","match","initialState","defaultCityId","persistedState","serializedState","localStorage","getItem","JSON","parse","Error","loadState","store","createStore","action","favoriteExists","find","undefined","filter","favorite","dayExists","DayIcon","NightIcon","__REDUX_DEVTOOLS_EXTENSION__","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58d3c8d3.chunk.js","sourcesContent":["\r\nexport const urlFromImgId = (weatherImageNumber) => {\r\n    const url = 'http://apidev.accuweather.com/developers/Media/Default/WeatherIcons/';\r\n    return `${url}${weatherImageNumber > 9 ? weatherImageNumber\r\n        : `0`+weatherImageNumber}-s.png`\r\n}\r\n\r\nexport const celsiusToFahrenheit = deg => {\r\n    return ((deg * 1.8) + 32).toFixed(1);\r\n}\r\n\r\nexport const getDayOfWeek = (epochTime) => {\r\n    let date = (new Date(epochTime*1000)).getDay();\r\n    const weekday = [];\r\n    weekday[0] =  \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n\r\n    return weekday[date];\r\n}\r\n\r\nexport const dateFormatting = (rawDate, id) => {\r\n    let date = rawDate.substring(0, rawDate.indexOf('T'));\r\n    date = date.split(\"-\").reverse().join(\"-\");\r\n    return date;\r\n};\r\n\r\n// TODO add case of empty string\r\nexport const replaceSpacesInCityQuery = (cityName) => {\r\n    // if (cityName.isEmpty)\r\n    return encodeURIComponent(cityName.trim());\r\n};\r\n","import axios from \"axios\";\r\nimport {replaceSpacesInCityQuery} from \"./baseUtils\";\r\n\r\nconst apiKey = '9MpqiOaZsD1p9P11PloCiFHszwVAkUcT';\r\n// const apiKey = 'test';\r\n\r\nexport const requestLocationKey = location => {\r\n    location = replaceSpacesInCityQuery(location);\r\n    const url = 'http://dataservice.accuweather.com/locations/v1/cities/search?apikey='+apiKey+'&q='+location;\r\n    try {\r\n        console.log('requestLocationKey sent:', location);\r\n        return axios.get(url)\r\n            .then(value => value.data)\r\n            .then(value => value[0])\r\n    } catch (err) {\r\n        console.log('requestLocationKey - Failed. Error: ', err);\r\n    }\r\n};\r\n\r\nexport const requestCurrentConditionsByKey = key => {\r\n    const url = 'http://dataservice.accuweather.com/currentconditions/v1/'+key+'?apikey='+apiKey;\r\n    try {\r\n        console.log('requestCurrentConditionsByKey sent: ', key);\r\n        return axios.get(url)\r\n            .then(value => value.data)\r\n            .then(value => value[0])\r\n    } catch (err) {\r\n        console.log('requestCurrentConditionsByKey - Failed. Error: ', err);\r\n    }\r\n};\r\n\r\nexport const requestNext5DaysForecast = locationKey => {\r\n    const url = 'http://dataservice.accuweather.com/forecasts/v1/daily/5day/'+locationKey+'?apikey='+apiKey+'&metric=true';\r\n    try {\r\n        console.log('requestNext5DaysForecast sent: ', locationKey);\r\n        return axios.get(url)\r\n            .then(value => value.data)\r\n            .then(value => value.DailyForecasts)\r\n    } catch (err) {\r\n        console.log('requestNext5DaysForecast - Failed. Error: ', err);\r\n    }\r\n};\r\n\r\nexport const autoSearchQuery = query => {\r\n    const url = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey='+apiKey+'&q='+query;\r\n    try {\r\n        console.log('autoSearchQuery sent: ', query);\r\n        return axios.get(url).then(value => value.data)\r\n    } catch (err) {\r\n        console.log('autoSearchQuery - Failed. Error: ', err);\r\n    }\r\n};\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport './Navigation.scss';\r\nimport {AsyncTypeahead} from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport {autoSearchQuery} from './Utils/apiUtils'\r\n\r\nclass Navigation extends React.Component {\r\n\r\n    // TODO move dispatches to actionCreators.\r\n    _handleSearch = (query) => {\r\n        this.props.dispatch({type: 'SET_IS_LOADING', isLoading: true});\r\n        autoSearchQuery(query)\r\n            .then(value => {\r\n                console.log('back from autoSearch: ', value);\r\n                return value;\r\n            })\r\n            .then(value => {\r\n                this.props.dispatch({\r\n                    type: 'ADD_SEARCH_OPTIONS',\r\n                    options: value,\r\n                    isLoading: false\r\n                });\r\n                this.props.dispatch({type: 'SET_IS_LOADING', isLoading: false});\r\n            })\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            isCelsius,\r\n            isLightTheme,\r\n            children\r\n        } = this.props;\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\" id=\"mainNav\">\r\n                    <div className=\"container\">\r\n                        <Link className=\"navbar-brand js-scroll-trigger\" to=\"/\">CastAWeather</Link>\r\n                        <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\"\r\n                                data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\"\r\n                                aria-label=\"Toggle navigation\">\r\n                            <span className={'navbar-toggler-icon'} />\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                            <ul className=\"navbar-nav mr-auto\">\r\n                                <li>\r\n\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link js-scroll-trigger\" to=\"/\">Home</Link>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link js-scroll-trigger\"\r\n                                          to=\"/favorites\">Favorites</Link>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"toggle-group\">\r\n                                <div className=\"custom-control custom-switch\">\r\n                                    <input type=\"checkbox\"\r\n                                           className=\"custom-control-input\"\r\n                                           id=\"themeSwitch\"\r\n                                           onChange={() => this.props.dispatch({type: 'TOGGLE_THEME'})}\r\n                                           checked={!isLightTheme}\r\n                                    />\r\n                                    <label\r\n                                        className=\"custom-control-label text-white pr-2\"\r\n                                        htmlFor=\"themeSwitch\"\r\n                                    >Light / Dark Theme</label>\r\n                                </div>\r\n                                <div className=\"custom-control custom-switch\">\r\n                                    <input type=\"checkbox\"\r\n                                           className=\"custom-control-input\"\r\n                                           id=\"temperatureSwitch\"\r\n                                           onChange={() => this.props.dispatch({type: 'TOGGLE_TEMP'})}\r\n                                           checked={!isCelsius}\r\n                                    />\r\n                                    <label\r\n                                        className=\"custom-control-label text-white pr-2\"\r\n                                        htmlFor=\"temperatureSwitch\"\r\n                                    >C / F</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <AsyncTypeahead\r\n                                id={'search'}\r\n                                isLoading={this.props.isLoading}\r\n                                labelKey=\"LocalizedName\"\r\n                                minLength={3}\r\n                                onSearch={this._handleSearch}\r\n                                placeholder=\"Search for a city...\"\r\n                                renderMenuItemChildren={(option, props) => (\r\n                                    option.LocalizedName\r\n                                )}\r\n                                options={this.props.options}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isCelsius: state.isCelsius,\r\n    isLightTheme: state.isLightTheme,\r\n    isLoading: state.isLoading,\r\n    options: state.options\r\n})\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './TemperatureIndicator.scss'\r\n\r\nclass TemperatureIndicator extends React.Component {\r\n\r\n    setIndicatorColor = temp => {\r\n        if (temp >= 40) {\r\n            return [\"thermometer-full\", \"#d20025\"];\r\n        } else if (temp >= 30) {\r\n            return [\"thermometer-three-quarters\", '#d2ce0e'];\r\n        } else if (temp >= 20) {\r\n            return [\"thermometer-half\", '#2ad20d'];\r\n        } else if (temp >= 15) {\r\n            return [\"thermometer-quarter\", '#2428ec'];\r\n        } else {\r\n            return [\"thermometer-empty\", '#248eec'];\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const TemperatureIndicators =  this.setIndicatorColor(this.props.temperature)\r\n        return (\r\n            <FontAwesomeIcon\r\n                className={`primary mb-2 ${this.props.className}`}\r\n                icon={TemperatureIndicators[0]}\r\n                color={TemperatureIndicators[1]}\r\n                size={this.props.isHeadline ? '3x' : '1x'}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TemperatureIndicator;\r\n","//\r\n// export const addFavorite = (fav) => ({\r\n//     type: 'ADD_FAVORITE',\r\n//     id: fav.id,\r\n//     city: fav.city,\r\n//     temperature: fav.temperature,\r\n//     WeatherText: fav.WeatherText,\r\n//     WeatherIcon: fav.WeatherIcon\r\n// });\r\n//\r\n// export const toggleTemperature = () => ({\r\n//     type: 'TOGGLE_TEMP',\r\n//     isCelsius: !this.props.isCelsius\r\n// });\r\n//\r\n// export const toggleTheme = () => ({\r\n//     type: 'TOGGLE_THEME',\r\n//     isLightTheme: !this.props.isLightTheme\r\n// });\r\n//\r\n// export const updateFavoriteItem = (favorites, favItem) => ({\r\n//     type: 'UPDATE_FAVORITE',\r\n//     favorites: favorites.map(favorite => {\r\n//             if (favorite.id !== favItem.id) {\r\n//                 return favorite;\r\n//             }\r\n//             return {\r\n//                 ...favorite,\r\n//                 temperature: favItem.temperature,\r\n//                 WeatherText: favItem.WeatherText,\r\n//                 WeatherIcon: favItem.WeatherIcon\r\n//             }\r\n//         }\r\n//     )\r\n// });\r\n\r\nexport const addToFavorites = (cityId, city, originCountry,\r\n                               weatherText, weatherIcon, temperature) => ({\r\n    type: 'ADD_FAVORITE',\r\n    CityId: cityId,\r\n    City: city,\r\n    OriginCountry: originCountry,\r\n    Temperature: temperature,\r\n    WeatherText: weatherText,\r\n    WeatherIcon: weatherIcon\r\n});\r\n\r\nexport const removeFromFavorites = (cityId) => ({\r\n    type: 'REMOVE_FAVORITE',\r\n    CityId: cityId,\r\n});\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './Header.scss'\r\nimport TemperatureIndicator from \"./TemperatureIndicator\";\r\nimport {urlFromImgId, celsiusToFahrenheit} from '../Utils/baseUtils';\r\nimport {addToFavorites, removeFromFavorites} from '../Utils/actionCreators';\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        const {\r\n            city,\r\n            cityId,\r\n            originCountry,\r\n            isCelsius,\r\n            weatherText,\r\n            weatherIcon,\r\n            temperature,\r\n            IsDayTime\r\n        } = this.props;\r\n        return (\r\n            <header className={`masthead border-bottom ${IsDayTime? `day` : `night`}`}>\r\n                <div className=\"d-flex justify-content-start pl-lg-5\">\r\n                    <div className=\"btn-group pt-3\">\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-lg btn-outline-secondary\"\r\n                                onClick={() => {\r\n                                    this.props.dispatch(\r\n                                        addToFavorites(\r\n                                            cityId,\r\n                                            city,\r\n                                            originCountry,\r\n                                            weatherText,\r\n                                            weatherIcon,\r\n                                            temperature\r\n                                        )\r\n                                    )\r\n                                }}>\r\n                            <FontAwesomeIcon icon=\"star\" />\r\n                        </button>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-lg btn-outline-secondary\"\r\n                                onClick={() => {\r\n                                    this.props.dispatch(removeFromFavorites(cityId))\r\n                                }}\r\n                        >\r\n                            <FontAwesomeIcon icon=\"trash-alt\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container d-flex h-100 align-items-center\">\r\n                    <div className=\"mx-auto text-center\">\r\n                        <h1 className=\"mx-auto my-0 text-uppercase text-white border city-info\">{city}</h1>\r\n                        <p className=\"mx-auto my-0 text-white city-info\">{originCountry}</p>\r\n                        <img src={urlFromImgId(weatherIcon)}\r\n                             crossOrigin=\"anonymous\"\r\n                             alt={weatherText} />\r\n                        <h2 className=\"text-white mx-auto mt-2 mb-5 city-info\">\r\n                            {isCelsius ? temperature\r\n                                : celsiusToFahrenheit(temperature)\r\n                            }&#176;\r\n                        </h2>\r\n                        <TemperatureIndicator\r\n                            temperature={temperature}\r\n                            color={\"red\"}\r\n                            isHeadline={true}\r\n                        />\r\n                        <h2 className=\"text-white mx-auto mt-2 mb-5 city-info\">\r\n                            {weatherText}</h2>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(Header);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport TemperatureIndicator from \"./TemperatureIndicator\";\r\nimport {celsiusToFahrenheit, getDayOfWeek, dateFormatting} from \"../Utils/baseUtils\";\r\n\r\nclass NextDaysItem extends React.Component {\r\n    render() {\r\n        const {\r\n            key,\r\n            isCelsius,\r\n            Date,\r\n            EpochDate,\r\n            Temperature,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"col-md-2\">\r\n                <div className=\"card mb-4 shadow-sm\">\r\n                    <div className=\"card-body text-center\">\r\n                        <h6 className=\"text-uppercase m-2\">{getDayOfWeek(EpochDate)}</h6>\r\n                        <h4 className=\"text-uppercase m-0\">\r\n                            {isCelsius ?\r\n                                `${Temperature.Minimum.Value}\\xB0\r\n                                 - ${Temperature.Maximum.Value}\\xB0`\r\n                                : `${celsiusToFahrenheit(Temperature.Minimum.Value)}\\xB0\r\n                                 - ${celsiusToFahrenheit(Temperature.Maximum.Value)}\\xB0`}\r\n                        </h4>\r\n                        <div className=\"d-flex justify-content-around\">\r\n                            <TemperatureIndicator\r\n                                temperature={Temperature.Minimum.Value}/>\r\n                            <TemperatureIndicator\r\n                                temperature={Temperature.Maximum.Value}/>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-around\">\r\n                            <FontAwesomeIcon\r\n                                icon=\"moon\" style={{color: '#2e3ed9'}}/>\r\n                            <FontAwesomeIcon\r\n                                icon=\"sun\" style={{color: '#d9d167'}}/>\r\n                        </div>\r\n                        <hr className=\"my-4\" />\r\n                        <p className=\"text-uppercase m-2 small\">\r\n                            {dateFormatting(Date, key)}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect()(NextDaysItem);\r\n","import React from 'react'\r\nimport NextDaysItem from \"./NextDaysItem\";\r\nimport {connect} from \"react-redux\";\r\nimport {requestNext5DaysForecast} from \"../Utils/apiUtils\";\r\n\r\nclass NextDays extends React.Component {\r\n    componentDidMount() {\r\n        requestNext5DaysForecast(this.props.cityId)\r\n            .then(value => {\r\n                value.map((day) => {\r\n                    this.props.dispatch(this.phraseData(day));\r\n                    return day;\r\n                });\r\n                return value\r\n            })\r\n            .catch(reason => console.log('request5DaysConditions error: ',reason));\r\n    }\r\n\r\n    // TODO move to actionCreators.\r\n    phraseData = day => ({\r\n        type: 'UPDATE_CURRENTS_NEXT_5_DAYS',\r\n        Date: day.Date,\r\n        EpochDate: day.EpochDate,\r\n        Temperature: day.Temperature,\r\n        Day: day.Day,\r\n        Night: day.Night\r\n    })\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <h3 className={'mx-auto my-4 pl-4 text-uppercase'}>The Next 5 Days:</h3>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.props.DailyForecasts.map((day, index) => {\r\n                        return <NextDaysItem\r\n                            {...day}\r\n                            isCelsius={this.props.isCelsius}\r\n                            key={this.props.cityId+index} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    cityId: state.currentlyDisplayed.CityId,\r\n    isCelsius: state.isCelsius,\r\n    DailyForecasts: state.currentlyDisplayed.DailyForecasts\r\n});\r\n\r\nexport default connect(mapStateToProps)(NextDays);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport './Home.scss';\r\nimport Header from \"../Common/Header\";\r\nimport NextDays from \"../Common/NextDays\";\r\nimport {requestLocationKey, requestCurrentConditionsByKey} from '../Utils/apiUtils'\r\n\r\nclass Home extends React.Component {\r\n    componentDidMount() {\r\n        // TODO check TTL and not send a redundant request.\r\n        requestLocationKey(this.props.defaultCity)\r\n            .then(value => {\r\n                // TODO move dispatch to actionCreators.\r\n                this.props.dispatch({\r\n                    type: 'UPDATE_CURRENT_CITY_INFO',\r\n                    City: value.EnglishName,\r\n                    CityId: value.Key,\r\n                    OriginCountry: value.Country.EnglishName,\r\n                });\r\n                return value.Key\r\n            })\r\n            .then(value => requestCurrentConditionsByKey(value))\r\n            .then(value => {\r\n                // TODO move dispatch to actionCreators.\r\n                this.props.dispatch({\r\n                    type: 'UPDATE_CURRENT_CITY_CONDITIONS',\r\n                    WeatherText: value.WeatherText,\r\n                    WeatherIcon: value.WeatherIcon,\r\n                    Temperature: value.Temperature.Metric.Value,\r\n                    IsDayTime: value.IsDayTime\r\n                });\r\n                return value\r\n            })\r\n            .catch(reason => console.log('requestCurrentConditions error: ',reason));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'jumbotron home'}>\r\n                <Header {...this.props} />\r\n                <NextDays {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    TTL: state.TTL,\r\n    isCelsius: state.isCelsius,\r\n    defaultCity: state.defaultCity,\r\n    city: state.currentlyDisplayed.City,\r\n    cityId: state.currentlyDisplayed.CityId,\r\n    originCountry: state.currentlyDisplayed.OriginCountry,\r\n    weatherText: state.currentlyDisplayed.WeatherText,\r\n    weatherIcon: state.currentlyDisplayed.WeatherIcon,\r\n    temperature: state.currentlyDisplayed.Temperature,\r\n    DailyForecasts: state.currentlyDisplayed.DailyForecasts\r\n})\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React from 'react'\r\nimport './FavoriteItem.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport TemperatureIndicator from \"./TemperatureIndicator\";\r\nimport {connect} from \"react-redux\";\r\nimport {celsiusToFahrenheit, urlFromImgId} from \"../Utils/baseUtils\";\r\nimport {removeFromFavorites} from '../Utils/actionCreators';\r\n\r\nclass FavoriteItem extends React.Component {\r\n    render() {\r\n        const {\r\n            isCelsius,\r\n            CityId,\r\n            City,\r\n            OriginCountry,\r\n            Temperature,\r\n            WeatherText,\r\n            WeatherIcon\r\n        } = this.props;\r\n        return (\r\n            <div className=\"col-md-4\">\r\n                <div className=\"card mb-4 shadow-sm\">\r\n                    <div className=\"card-body text-center\">\r\n                        <img src={urlFromImgId(WeatherIcon)}\r\n                             crossOrigin=\"anonymous\"\r\n                             alt={WeatherText} />\r\n                        <h4 className=\"text-uppercase m-0\">{City}</h4>\r\n                        <p className=\"mx-auto my-0\">{OriginCountry}</p>\r\n                        <hr className=\"my-4\" />\r\n                        <TemperatureIndicator\r\n                            temperature={Temperature}/>\r\n                        <h5 className=\"temperature-content\">\r\n                            { isCelsius ? Temperature\r\n                                : celsiusToFahrenheit(Temperature)\r\n                            }&#176;\r\n                        </h5>\r\n                        <div className=\"small text-black-50\">{WeatherText}</div>\r\n\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                            <div className=\"btn-group\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-sm btn-outline-secondary\"\r\n                                    onClick={() => this.props.dispatch(removeFromFavorites(CityId))}\r\n\r\n                                >\r\n                                    <FontAwesomeIcon icon=\"trash-alt\"/>\r\n                                </button>\r\n                                {/*<button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">*/}\r\n                                {/*    <FontAwesomeIcon icon=\"expand\" />*/}\r\n                                {/*</button>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(FavoriteItem);\r\n","import React from 'react';\r\nimport './Favorites.scss';\r\nimport FavoriteItem from \"../Common/FavoriteItem\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Favorites extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"favorites-section py-4 bg-black\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            {this.props.favorites.map((location, index) => {\r\n                                return <FavoriteItem\r\n                                    {...location}\r\n                                    isCelsius={this.props.isCelsius}\r\n                                    isLightTheme={this.props.isLightTheme}\r\n                                    key={index}/>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    favorites: state.favorites,\r\n    isCelsius: state.isCelsius,\r\n    isLightTheme: state.isLightTheme\r\n});\r\n\r\nexport default connect(mapStateToProps)(Favorites);\r\n","import React from 'react';\nimport './App.css';\nimport Navigation from \"./components/Navigation\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport Home from \"./components/Pages/Home\";\nimport Favorites from \"./components/Pages/Favorites\";\n\nlibrary.add(fab, fas);\n\nfunction App() {\n    return (\n        <Router>\n            <Navigation>\n                <Route\n                    exact={true}\n                    path=\"/\"\n                    component={Home}\n                />\n                <Route\n                    path={'/favorites'}\n                    component={Favorites}\n                />\n            </Navigation>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport { loadState, saveState } from './components/Utils/localStorage';\nimport throttle from 'lodash/throttle';\n\n// TODO move entire store and redux logic to dedicated locations.\nconst initialState = {\n    isCelsius: true,\n    isLightTheme: true,\n    defaultCity: 'Tel Aviv',\n    defaultCityId: 215854,\n    IsDayTime: true,\n    TTL: '', // if TTL < Today -> update, else no.\n    isLoading: false,\n    options: [],\n    currentlyDisplayed: {\n        City: 'cityT',\n        CityId: 215854,\n        OriginCountry: 'WhoTown',\n        WeatherText: 'Sun Gone Nuclear',\n        WeatherIcon: '5',\n        Temperature: '5000',\n        DailyForecasts: []\n    },\n    favorites: [\n        {\n            City: 'New York',\n            CityId: '159259',\n            OriginCountry: 'USA',\n            Temperature: 14,\n            WeatherText: 'Chilly',\n            WeatherIcon: '11'\n        },\n        {\n            City: 'Jakulugaba',\n            CityId: '158259',\n            OriginCountry: 'Jakika',\n            Temperature: 2500,\n            WeatherText: 'Hot!!',\n            WeatherIcon: '2'\n        },\n        {\n            City: 'New York',\n            CityId: '119259',\n            OriginCountry: 'USA',\n            Temperature: 14,\n            WeatherText: 'Chilly',\n            WeatherIcon: '11'\n        },\n        {\n            City: 'Jakulugaba',\n            CityId: '158559',\n            OriginCountry: 'Jakika',\n            Temperature: 2500,\n            WeatherText: 'Hot!!',\n            WeatherIcon: '2'\n        },\n    ]\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_TEMP':\n            return { ...state, isCelsius: !state.isCelsius };\n        case 'TOGGLE_THEME':\n            return { ...state, isLightTheme: !state.isLightTheme};\n        case 'SET_IS_LOADING':\n            return { ...state, isLoading: action.isLoading};\n        case 'ADD_SEARCH_OPTIONS':\n            return {\n                ...state,\n                options: [\n                    ...state.options,\n                    ...action.options\n                ]\n            }\n        case 'ADD_FAVORITE':\n            const favoriteExists = state.favorites.find( ({ CityId }) => CityId === action.CityId );\n            if (favoriteExists !== undefined) {\n                return {\n                    ...state,\n                    favorites: state.favorites.map((value) => {\n                        if (value.CityId === action.CityId) {\n                            return {\n                                ...value,\n                                Temperature: action.Temperature,\n                                WeatherText: action.WeatherText,\n                                WeatherIcon: action.WeatherIcon\n                            }\n                        }\n                        return value;\n                    })\n                }\n            }\n            return {\n                ...state,\n                favorites: [\n                    ...state.favorites,\n                    {\n                        City: action.City,\n                        CityId: action.CityId,\n                        OriginCountry: action.OriginCountry,\n                        Temperature: action.Temperature,\n                        WeatherText: action.WeatherText,\n                        WeatherIcon: action.WeatherIcon\n                    }\n                ]\n            };\n        case 'REMOVE_FAVORITE':\n            return {\n                ...state,\n                favorites: state.favorites\n                    .filter(favorite => favorite.CityId !== action.CityId)\n            };\n        case 'UPDATE_CURRENT_CITY_INFO':\n            return {\n                ...state,\n                currentlyDisplayed: {\n                    ...state.currentlyDisplayed,\n                    City: action.City,\n                    CityId: action.CityId,\n                    OriginCountry: action.OriginCountry\n                }\n            };\n        case 'UPDATE_CURRENT_CITY_CONDITIONS':\n            return {\n                ...state,\n                currentlyDisplayed: {\n                    ...state.currentlyDisplayed,\n                    WeatherText: action.WeatherText,\n                    WeatherIcon: action.WeatherIcon,\n                    Temperature: action.Temperature,\n                    IsDayTime: action.IsDayTime\n                }\n            };\n        case 'UPDATE_CURRENTS_NEXT_5_DAYS':\n            const dayExists = state.favorites.find( ({ Date }) => Date === action.Date );\n            if (dayExists !== undefined) {\n                return {\n                    ...state,\n                    currentlyDisplayed: {\n                        ...state.currentlyDisplayed,\n                        DailyForecasts: state.currentlyDisplayed.DailyForecasts.map((value) => {\n                            if (value.Date === action.Date && value.CityId === action.CityId) {\n                                return {\n                                    ...value,\n                                    Temperature: action.Temperature,\n                                    DayIcon: action.Day,\n                                    NightIcon: action.Night\n                                }\n                            }\n                            return value;\n                        })\n                    }\n                }\n            }\n            return {\n                ...state,\n                currentlyDisplayed: {\n                    ...state.currentlyDisplayed,\n                    DailyForecasts: [\n                        ...state.currentlyDisplayed.DailyForecasts\n                            .filter(day => day.CityId === action.CityId),\n                        {\n                            CityId: action.CityId,\n                            EpochDate: action.EpochDate,\n                            Date: action.Date,\n                            Temperature: action.Temperature,\n                            DayIcon: action.Day,\n                            NightIcon: action.Night\n                        }\n                    ]\n                }\n            };\n        default:\n            return state || [];\n    }\n}\n\nconst persistedState = loadState();\nconst store = createStore(\n    reducer,\n    persistedState,\n    window.__REDUX_DEVTOOLS_EXTENSION__\n    && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(throttle(() => {\n    saveState(store.getState());\n}, 1000));\n\nReactDOM.render(\n    <Provider store={store}>\n        {/*{localStorage.clear()}*/}\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        console.log(Error('LocalStorage: loadState() Failed. Error: '+err));\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        console.log(Error('LocalStorage: saveState() Failed. Error: '+err));\r\n    }\r\n}\r\n"],"sourceRoot":""}